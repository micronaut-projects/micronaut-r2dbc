plugins {
    id "io.micronaut.build.internal.r2dbc-dependencies"
    id "java"
    id "com.adarshr.test-logger"
    id "io.micronaut.application"
    id "io.micronaut.test-resources"
}

group "io.micronaut.example"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

micronaut {
    version libs.versions.micronaut.asProvider().get()
    runtime "netty"
    testRuntime "junit"
    testResources {
        clientTimeout = 300
    }
}

testlogger {
    showFullStackTraces true
}

application {
    mainClass = "testgraalvm.Application"
}

dependencies {
    annotationProcessor(mn.micronaut.graal)
    annotationProcessor(mnData.micronaut.data.processor)
    runtimeOnly(mnSql.micronaut.jdbc.hikari)
    runtimeOnly(mn.logback.classic)

    implementation(mn.micronaut.http.client)
    implementation project(":r2dbc-core")
    implementation(mnData.micronaut.data.r2dbc) {
        exclude module:'micronaut-r2dbc-core'
    }
    implementation(mnSerde.micronaut.serde.jackson)

    implementation project(":test-graalvm:common")
    testImplementation project(":test-graalvm:common-tests")
    testImplementation(mnTest.micronaut.test.core)

    runtimeOnly mn.snakeyaml
}

tasks.named("check") { task ->
    def graal = ["jvmci.Compiler", "java.vendor.version", "java.vendor"].any {
        println "$it ${System.getProperty(it)}"
        System.getProperty(it)?.toLowerCase(Locale.ENGLISH)?.contains("graal")
    }
    if (graal) {
        task.dependsOn("nativeTest")
    }
}

graalvmNative {
    metadataRepository {
        enabled = true
    }
}
