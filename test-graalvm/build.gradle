plugins {
    id 'io.micronaut.application' version "2.0.2" apply false
    id 'io.micronaut.library'  version "1.3.3" apply false
}

subprojects { Project subproject ->

    apply plugin: "java"
    apply plugin: "groovy"
    apply plugin: 'com.adarshr.test-logger'

    group "io.micronaut.example"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    if (subproject.getName().startsWith("common")) {
        apply plugin: 'io.micronaut.library'

        micronaut {
            version project.ext.micronautVersion
        }

        return
    }

    apply plugin: 'io.micronaut.application'

    micronaut {
        version project.ext.micronautVersion
        runtime "netty"
        testRuntime "spock"
    }

    dependencies {
        annotationProcessor "io.micronaut:micronaut-graal"
        annotationProcessor("io.micronaut.data:micronaut-data-processor:$micronautDataVersion")
        runtimeOnly "io.micronaut.sql:micronaut-jdbc-hikari"
        runtimeOnly "ch.qos.logback:logback-classic"

        implementation "io.micronaut:micronaut-http-client"
        implementation project(":data-r2dbc")
        implementation project(":test-graalvm:common")
        testImplementation project(":test-graalvm:common-tests")
        testImplementation "io.micronaut.test:micronaut-test-core:$micronautTestVersion"
        testImplementation platform("org.testcontainers:testcontainers-bom:$testContainersVersion")
        testImplementation "org.testcontainers:spock"
        testImplementation "org.testcontainers:jdbc"
    }

    testlogger {
        showFullStackTraces true
    }

    nativeImage {
        args("-H:+ReportExceptionStackTraces")
    }

    mainClassName = "testgraalvm.Application"
}

project("common") {
    dependencies {
        annotationProcessor("io.micronaut.data:micronaut-data-processor:$micronautDataVersion")
        implementation "io.micronaut:micronaut-http-client"
        annotationProcessor "io.micronaut:micronaut-graal"
        implementation project(":data-r2dbc")
    }
}
project("common-tests") {
    dependencies {
        api project(":data-r2dbc")
        implementation project(":test-graalvm:common")
        implementation "io.micronaut:micronaut-http-client"
        implementation "io.micronaut.test:micronaut-test-core:$micronautTestVersion"
        implementation platform("org.testcontainers:testcontainers-bom:$testContainersVersion")
        implementation "org.testcontainers:spock"
        implementation "org.testcontainers:jdbc"
    }
}
project("h2") {
    dependencies {
        runtimeOnly 'io.r2dbc:r2dbc-h2'
        runtimeOnly("com.h2database:h2:1.4.200") {
            force = true
        }
    }
    nativeImage {
        args("--report-unsupported-elements-at-runtime")
    }
    // Skip on GraalVM Java11
    tasks.findByName("testNativeImage").onlyIf { !isGraal() || JavaVersion.current() != JavaVersion.VERSION_11 }
    tasks.findByName("nativeImage").onlyIf { !isGraal() || JavaVersion.current() != JavaVersion.VERSION_11 }
}
project("mssql") {
    dependencies {
        runtimeOnly "com.microsoft.sqlserver:mssql-jdbc"
        runtimeOnly 'io.r2dbc:r2dbc-mssql'
        testImplementation "org.testcontainers:mssqlserver"
    }

    nativeImage {
        args('-H:+AddAllCharsets')
    }
}
project("postgres") {
    dependencies {
        runtimeOnly "org.postgresql:postgresql"
        runtimeOnly 'io.r2dbc:r2dbc-postgresql'
        testImplementation "org.testcontainers:postgresql"
    }
}
if (Boolean.getBoolean('test.oracle')) {
    project("oracle") {
        repositories {
            mavenLocal()
        }
        // hack until driver available in central
        def urlFile = { url, name ->
            File file = new File("$buildDir/download/${name}.jar")
            file.parentFile.mkdirs()
            if (!file.exists()) {
                new URL(url).withInputStream { downloadStream ->
                    file.withOutputStream { fileOut ->
                        fileOut << downloadStream
                    }
                }
            }
            files(file.absolutePath)
        }
        dependencies {
            runtimeOnly urlFile('https://github.com/oracle/oracle-r2dbc/releases/download/0.1.0/oracle-r2dbc-0.1.0.jar', 'oracle-r2dbc')
            runtimeOnly "com.oracle.database.jdbc:ojdbc11:21.1.0.0"
            testImplementation "org.testcontainers:oracle-xe"
        }
        // Not enough memory on Github Actions to test native images :(
        tasks.findByName("testNativeImage").enabled(false)
        tasks.findByName("nativeImage").enabled(false)

    }
}
project("mysql") {
    dependencies {
        runtimeOnly 'dev.miku:r2dbc-mysql'
        runtimeOnly "mysql:mysql-connector-java"
        testImplementation "org.testcontainers:mysql"
    }
}
project("mariadb") {
    dependencies {
        implementation "org.mariadb:r2dbc-mariadb"

        testRuntimeOnly "org.mariadb.jdbc:mariadb-java-client"
        testImplementation "org.testcontainers:mariadb"
    }
    project.afterEvaluate {
        nativeImage.enabled = false
        testNativeImage.enabled = false
    }
}

boolean isGraal() {
    for (String prop : ["jvmci.Compiler", "java.vendor.version"]) {
        String vv = System.getProperty(prop)
        if (vv != null && vv.toLowerCase(Locale.ENGLISH).contains("graal")) {
            return true
        }
    }
    return false
}