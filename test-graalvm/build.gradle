plugins {
    id 'io.micronaut.application' apply false
    id 'io.micronaut.library' apply false
}

subprojects { Project subproject ->

    apply plugin: "java"
    apply plugin: "groovy"
    apply plugin: 'com.adarshr.test-logger'

    group "io.micronaut.example"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    if (subproject.getName().startsWith("common")) {
        apply plugin: 'io.micronaut.library'

        micronaut {
            version project.ext.micronautVersion
        }

        return
    }

    apply plugin: 'io.micronaut.application'

    micronaut {
        version project.ext.micronautVersion
        runtime "netty"
        testRuntime "spock"
    }

    dependencies {
        annotationProcessor(libs.micronaut.graal)
        annotationProcessor(libs.micronaut.data.processor)
        runtimeOnly "io.micronaut.sql:micronaut-jdbc-hikari"
        runtimeOnly "ch.qos.logback:logback-classic"

        implementation(libs.micronaut.http.client)
        implementation project(":r2dbc-core")
        implementation("io.micronaut.data:micronaut-data-r2dbc:$micronautDataVersion") {
            exclude module:'micronaut-r2dbc-core'
        }
        implementation project(":test-graalvm:common")
        testImplementation project(":test-graalvm:common-tests")
        testImplementation(libs.micronaut.test.core)
        testImplementation platform("org.testcontainers:testcontainers-bom:$testContainersVersion")
        testImplementation(libs.testcontainers.spock)
        testImplementation(libs.testcontainers.jdbc)
    }

    testlogger {
        showFullStackTraces true
    }

    mainClassName = "testgraalvm.Application"
}

project("common") {
    dependencies {
        implementation(libs.jakarta.inject.api)
        annotationProcessor(libs.micronaut.data.processor)
        implementation(libs.micronaut.http.client)
        annotationProcessor(libs.micronaut.graal)
        implementation "io.micronaut.data:micronaut-data-r2dbc:$micronautDataVersion", {
            exclude module:'micronaut-r2dbc-core'
        }
    }
}
project("common-tests") {
    dependencies {
        api("io.micronaut.data:micronaut-data-r2dbc:$micronautDataVersion") {
            exclude module:'micronaut-r2dbc-core'
        }
        implementation(libs.jakarta.inject.api)
        implementation project(":test-graalvm:common")
        implementation(libs.micronaut.http.client)
        implementation(libs.micronaut.test.core)
        implementation platform("org.testcontainers:testcontainers-bom:$testContainersVersion")
        implementation(libs.testcontainers.spock)
        implementation(libs.testcontainers.jdbc)
    }
}
project("h2") {
    dependencies {
        runtimeOnly 'io.r2dbc:r2dbc-h2'
        runtimeOnly("com.h2database:h2:1.4.200") {
            force = true
        }
    }
    nativeImage {
        args("--report-unsupported-elements-at-runtime")
    }
    // Skip on GraalVM Java11
    tasks.findByName("testNativeImage").onlyIf { !isGraal() || JavaVersion.current() != JavaVersion.VERSION_11 }
    tasks.findByName("nativeImage").onlyIf { !isGraal() || JavaVersion.current() != JavaVersion.VERSION_11 }
}
project("mssql") {
    dependencies {
        runtimeOnly "com.microsoft.sqlserver:mssql-jdbc"
        runtimeOnly 'io.r2dbc:r2dbc-mssql'
        testImplementation(libs.testcontainers.mssqlserver)
    }

    nativeImage {
        args('-H:+AddAllCharsets')
    }
}
project("postgres") {
    dependencies {
        runtimeOnly "org.postgresql:postgresql"
        runtimeOnly 'io.r2dbc:r2dbc-postgresql'
        testImplementation(libs.testcontainers.postgresql)
    }
}
if (Boolean.getBoolean('test.oracle')) {
    project("oracle") {
        dependencies {
            runtimeOnly 'com.oracle.database.r2dbc:oracle-r2dbc:0.2.0'
            runtimeOnly "com.oracle.database.jdbc:ojdbc11:21.1.0.0"
            testImplementation(libs.testcontainers.oracle.xe)
        }
        // Not enough memory on Github Actions to test native images :(
        tasks.findByName("testNativeImage").enabled(false)
        tasks.findByName("nativeImage").enabled(false)

    }
}
project("mysql") {
    dependencies {
        runtimeOnly 'dev.miku:r2dbc-mysql'
        runtimeOnly "mysql:mysql-connector-java"
        testImplementation(libs.testcontainers.mysql)
    }
}
project("mariadb") {
    dependencies {
        implementation(libs.r2dbc.mariadb)

        testRuntimeOnly(libs.mariadb.java.client)
        testImplementation(libs.testcontainers.mariadb)
    }
    project.afterEvaluate {
        nativeImage.enabled = false
        testNativeImage.enabled = false
    }
}

boolean isGraal() {
    for (String prop : ["jvmci.Compiler", "java.vendor.version"]) {
        String vv = System.getProperty(prop)
        if (vv != null && vv.toLowerCase(Locale.ENGLISH).contains("graal")) {
            return true
        }
    }
    return false
}
