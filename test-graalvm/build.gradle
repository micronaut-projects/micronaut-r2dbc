plugins {
    id 'io.micronaut.application' apply false
    id 'io.micronaut.minimal.application' apply false
    id 'io.micronaut.library' apply false
}

subprojects { Project subproject ->

    apply plugin: "java"
    apply plugin: "groovy"
    apply plugin: 'com.adarshr.test-logger'

    group "io.micronaut.example"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    if (subproject.getName().startsWith("common")) {
        apply plugin: 'io.micronaut.library'

        micronaut {
            version project.ext.micronautVersion
        }

        return
    }

    if (project.name == 'h2') {
        apply plugin: 'io.micronaut.minimal.application'
    } else {
        apply plugin: 'io.micronaut.application'
    }

    micronaut {
        version project.ext.micronautVersion
        runtime "netty"
        testRuntime "spock"
    }

    dependencies {
        annotationProcessor(mn.graal)
        annotationProcessor(mn.micronaut.data.processor)
        runtimeOnly(mn.micronaut.jdbc.hikari)
        runtimeOnly(mn.logback)

        implementation(mn.micronaut.http.client)
        implementation project(":r2dbc-core")
        implementation(mn.micronaut.data.r2dbc) {
            exclude module:'micronaut-r2dbc-core'
        }
        implementation project(":test-graalvm:common")
        testImplementation project(":test-graalvm:common-tests")
        testImplementation(mn.micronaut.test.core)
        testImplementation platform(libs.boms.testcontainers)
        testImplementation(libs.testcontainers.spock)
        testImplementation(libs.testcontainers.jdbc)
    }

    testlogger {
        showFullStackTraces true
    }

    mainClassName = "testgraalvm.Application"
}

project("common") {
    dependencies {
        annotationProcessor(mn.micronaut.data.processor)
        implementation(mn.micronaut.http.client)
        annotationProcessor(mn.micronaut.graal)
        implementation(mn.micronaut.data.r2dbc) {
            exclude module:'micronaut-r2dbc-core'
        }
    }
}
project("common-tests") {
    dependencies {
        api(mn.micronaut.data.r2dbc) {
            exclude module:'micronaut-r2dbc-core'
        }
        implementation project(":test-graalvm:common")
        implementation(mn.micronaut.http.client)
        implementation(mn.micronaut.test.core)
        implementation platform(libs.boms.testcontainers)
        implementation(libs.testcontainers.spock)
        implementation(libs.testcontainers.jdbc)
    }
}
project("h2") {
    dependencies {
        runtimeOnly(libs.managed.r2dbc.h2)
        runtimeOnly(libs.h2) {
            force = true
        }
    }
}
project("mssql") {
    dependencies {
        runtimeOnly(libs.mssql.jdbc)
        runtimeOnly(libs.managed.r2dbc.mssql)
        testImplementation(libs.testcontainers.mssqlserver)
    }

    graalvmNative {
        binaries {
            main {
                buildArgs('-H:+AddAllCharsets')
            }
        }
    }
}
project("postgres") {
    dependencies {
        runtimeOnly(libs.postgresql)
        runtimeOnly(libs.managed.r2dbc.postgresql)
        testImplementation(libs.testcontainers.postgresql)
    }
}
if (Boolean.getBoolean('test.oracle')) {
    project("oracle") {
        dependencies {
            runtimeOnly(libs.managed.r2dbc.oracle)
            runtimeOnly(libs.ojdbc11)
            testImplementation(libs.testcontainers.oracle)
        }
        // Not enough memory on Github Actions to test native images :(
        tasks.findByName("nativeTestCompile").enabled(false)
        tasks.findByName("nativeCompile").enabled(false)
    }
}
project("mysql") {
    dependencies {
        runtimeOnly(libs.managed.r2dbc.mysql)
        runtimeOnly(libs.mysql.connector.java)
        testImplementation(libs.testcontainers.mysql)
    }
}
project("mariadb") {
    dependencies {
        implementation(libs.managed.r2dbc.mariadb)

        testRuntimeOnly(libs.mariadb.java.client)
        testImplementation(libs.testcontainers.mariadb)
    }
    project.afterEvaluate {
        tasks.findByName("nativeTestCompile").enabled(false)
        tasks.findByName("nativeCompile").enabled(false)
    }
}

